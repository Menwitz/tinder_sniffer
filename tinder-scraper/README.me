# Tinder City Scraper

A continuous, high-throughput Node.js scraper that mimics Tinder app behavior to harvest profile data and photos within a geographic area. It tiles the target city into geospatial cells and issues randomized, human-like API requests to collect fresh profiles without repeats.

 Features

- Continuous Operation: Runs indefinitely, automatically shuffling cells and pausing between requests.
- Human-like Traffic: Randomized User-Agent, GPS jitter, and variable delays to avoid detection.
- Deduplication: Maintains an in-memory set of seen profile IDs to skip duplicates.
- Cell Pagination: Uses Tinder’s `s_number` token per cell to fetch new batches.
- Cold-Cell Heuristic: Skips cells after 3 consecutive rounds with no new profiles.
- Configurable Parallelism: Controls concurrency per token to balance speed and rate limits.
- Optional Proxy Support: Rotate through HTTP proxies to distribute load.

 Prerequisites

- Node.js v16+
- npm or yarn
- A Tinder account token (`X-Auth-Token`) obtained from browser DevTools or a mobile proxy.

 Installation

1. Clone the repo and navigate to its directory:
   ```bash
   git clone <repo-url>
   cd tinder-scraper
   ```
2. Install dependencies:
   ```bash
   npm install dotenv axios p-limit node-fetch
   ```

 Configuration

Create a `.env` file in the project root with the following variables:

```ini
TINDER_TOKENS="token1,token2"
PROXIES="http://user:pass@proxy1:port,http://proxy2:port"  # optional
MIN_LAT=48.800000
MAX_LAT=48.920000
MIN_LON=2.250000
MAX_LON=2.450000
CELL_RADIUS_KM=10
CONCURRENCY_PER_TOKEN=20
```

- TINDER_TOKENS: Comma-separated Tinder session tokens.
- PROXIES: (Optional) Comma-separated HTTP proxy URLs.
- MIN_LAT, MAX_LAT, MIN_LON, MAX_LON: Define the bounding box of your city.
- CELL_RADIUS_KM: Radius (km) of each grid cell. Default is 10 km.
- CONCURRENCY_PER_TOKEN: Number of parallel requests per token. Default is 20.

 Usage

Run the scraper:

```bash
node scraper.js
```

- The script will print status messages as it saves profiles and photos into the `tinder_photos/` directory.
- Profile metadata and images are organized by `<name>_<userId>`.

 Output Structure

```
tinder_photos/
└── <UserName>_<UserID>/
    ├── profile.json      # Metadata: age, bio, distance, timestamps, etc.
    ├── photo_1.jpg       # Downloaded photos
    └── photo_2.jpg
```

 Customization

- Request Delay: Adjust the `sleep(1000 + Math.random() * 2000)` interval in `scraper.js` to change pause length.
- Cold-Cell Threshold: Modify `state[cell.key].cold >= 3` to change how many empty rounds before skipping a cell.
- User-Agents: Edit the `USER_AGENTS` array to include additional mobile or desktop strings.

 Notes

- Monitor console for `429` rate-limit warnings and adjust concurrency or add tokens/proxies accordingly.
- For long-term runs, consider persisting `seen` IDs to disk or a database to resume without duplication.
